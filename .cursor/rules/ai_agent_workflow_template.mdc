# AI Agent Workflow Template

## 개요

이 문서는 새로운 프로젝트에서 AI agent를 활용한 효율적인 개발 workflow를 설정하기 위한 템플릿입니다. FileTagger 프로젝트의 경험을 바탕으로 범용적으로 적용 가능한 규칙들을 정의합니다.

## 핵심 원칙

### 1. 역할 분담의 명확화
- **PM/PL**: 개발 방향 제시, 아키텍처 평가, 문서화, 의사결정
- **개발팀**: 구체적 구현, 기술적 문제 해결, 코드 품질 관리
- **QA팀**: 사용자 관점의 품질 보증, 테스트 수행
- **AI Agent**: 코드 분석/진단, 설계 지원, 문서화, 예방적 품질 관리

### 2. 체계적인 문서화 기반 개발
- **DRS(Development Request Specification)**: 개발 요청 명세서 작성
- **단계별 구현 계획**: 복잡한 작업을 관리 가능한 단계로 분해
- **상세한 기록**: 의사결정 과정 추적 및 지식 축적

### 3. 점진적 접근 방식
- 뼈대 구축 → 세부 구현 → 테스트 → 개선의 순환 구조
- 조기 피드백을 통한 방향 조정
- 실험적 접근 전 영향도 분석

## AI Agent 역할 정의

### 핵심 역할
1. **코드 분석 및 진단 전문가**
   - 복잡한 코드 구조 분석
   - 버그 원인 진단 및 해결 방안 제시
   - 성능 최적화 기회 식별

2. **아키텍처 설계 지원**
   - 모듈화 및 관심사 분리 제안
   - 코드 구조 개선 방안 제시
   - 확장성 및 유지보수성 향상

3. **문서화 및 지식 관리**
   - 기술적 결정사항 문서화
   - 개발 과정의 지식 축적
   - 신규 개발자 온보딩 지원

4. **예방적 품질 관리**
   - 반복적 버그 패턴 분석 및 예방
   - 코드 품질 이슈 자동 감지
   - 테스트 시나리오 검증

### 협업적 역할
1. **직접적인 코드 개선 및 개발**
   - 문제 분석을 통한 정확한 해결 방안 제시
   - 구체적인 코드 수정 제안 및 구현
   - 사용자 승인을 통한 단계별 진행
   - 복잡한 기능을 관리 가능한 단위로 분해

2. **의사결정 협업**
   - 아키텍처 변경 시 영향도 분석 및 대안 제시
   - 중대한 기술적 결정에 대한 상세한 설명
   - 실험적 접근 전 리스크 평가 및 계획 수립
   - 사용자와의 지속적인 소통을 통한 방향 조정

## 단계별 Workflow

### Phase 1: 문제 분석 및 진단 (AI Agent 주도)
```
1. 이슈/요구사항 수집
   ↓
2. 코드베이스 분석
   - 관련 파일 식별
   - 현재 구조 파악
   - 영향 범위 도출
   ↓
3. 문제 진단
   - 원인 분석
   - 해결 방안 제시
   - 우선순위 설정
   ↓
4. 해결 전략 수립
   - 단계별 접근 계획
   - 리스크 평가
   - 예상 소요 시간
```

### Phase 2: 설계 및 계획 (AI Agent + PM/PL 협업)
```
1. 상위 설계
   - 아키텍처 변경 필요성 검토
   - 모듈 구조 설계
   - 인터페이스 정의
   ↓
2. 상세 설계
   - 클래스/메서드 시그니처
   - 데이터 흐름 정의
   - 의존성 관계 정의
   ↓
3. 구현 계획
   - 단계별 구현 순서
   - 테스트 전략
   - 롤백 계획
```

### Phase 3: 구현 및 테스트 (AI Agent + 개발팀 협업)
```
1. 뼈대 구현
   - 클래스 구조 생성
   - 기본 인터페이스 구현
   - 핵심 로직 구현
   ↓
2. 세부 구현
   - 비즈니스 로직 구현
   - UI 컴포넌트 완성
   - 오류 처리 추가
   ↓
3. 테스트 및 검증
   - 단위 테스트 작성
   - 통합 테스트 수행
   - 사용자 시나리오 검증
```

### Phase 4: 검토 및 개선 (AI Agent + QA팀 협업)
```
1. 코드 리뷰
   - 구조적 개선점 식별
   - 성능 최적화 기회
   - 보안 취약점 검토
   ↓
2. 품질 검증
   - 반복적 버그 패턴 검사
   - 코드 품질 이슈 감지
   - 테스트 코드 일치성 확인
   ↓
3. 문서화
   - 구현 내용 문서화
   - API 문서 업데이트
   - 사용자 가이드 수정
   ↓
4. 지식 축적
   - 학습한 내용 기록
   - 향후 참고사항 정리
   - 베스트 프랙티스 업데이트
```

## 예방적 품질 관리 시스템

### 1. 반복적 버그 패턴 분석
- **시그널/이벤트 연결 누락**: 컴포넌트 간 통신 실패 자동 검사
- **상태 동기화 문제**: 데이터 변경 후 UI 업데이트 지연 감지
- **코드 품질 이슈**: 기본적 코딩 실수 사전 방지
- **테스트 코드 부족**: 실제 동작과 테스트 시나리오 간 불일치 해결

### 2. 자동화된 검증 도구
- **코드 품질 검증**: 정적 분석 도구 활용
- **의존성 분석**: 모듈 간 의존성 복잡도 측정
- **성능 병목 식별**: 성능 최적화 기회 자동 감지
- **보안 취약점 검사**: 보안 관련 이슈 사전 방지

## 문서 구조 표준화

### 필수 문서 디렉토리 구조
```
docs/
├── introduction/          # 프로젝트 소개, 목표
├── user_guide/           # 사용자 매뉴얼
├── developer_guide/      # 개발자 가이드
│   ├── dev_notes.md      # 개발팀 내부 기록
│   ├── drs/              # 개발 요청 명세
│   └── ai_agent_workflow.md  # AI Agent Workflow
├── api/                  # API 명세서
├── issues.md             # 개발 이슈 관리
├── conversation_log.md   # 대화 로그 (PM만 수정)
└── portfolio/            # 포트폴리오 자료
```

### 문서 관리 규칙
- **conversation_log.md**: PM 역할을 맡은 AI만 수정 가능
- **dev_notes.md**: 개발팀 내부 자유 기록 공간
- **issues.md**: 표준화된 이슈 보고 양식 사용
- **DRS**: 개발 요청 시 필수 명세서 작성

## 코드 품질 관리

### 정적 분석 도구 활용
- **포맷팅**: `ruff format`, `black` 등
- **린팅**: `ruff check`, `flake8` 등
- **타입 검사**: `mypy`, `pyright` 등
- **보안 검사**: `bandit`, `safety` 등

### 테스트 전략
- **단위 테스트**: 각 모듈별 독립적 테스트
- **통합 테스트**: 모듈 간 상호작용 테스트
- **UI 테스트**: 사용자 시나리오 기반 테스트
- **성능 테스트**: 성능 병목 지점 테스트

## 성공 지표

### 정량적 지표
- **개발 속도**: 기능 구현 시간 단축
- **버그 발생률**: 프로덕션 버그 감소 (특히 반복적 버그 패턴 감소)
- **코드 품질**: 복잡도, 중복도, 테스트 커버리지
- **문서화 완성도**: API 문서, 사용자 가이드 업데이트율
- **컴포넌트 연결 정확성**: 모듈 간 통신 오류 감소율
- **상태 동기화 성공률**: 데이터 변경 후 UI 업데이트 정확성

### 정성적 지표
- **개발자 만족도**: AI Agent 지원 효과성
- **코드 이해도**: 신규 개발자 온보딩 시간
- **유지보수성**: 버그 수정 시간, 기능 추가 용이성
- **팀 협업**: 역할 분담 명확성, 의사소통 효율성
- **예방적 품질 관리**: 반복적 버그 패턴 사전 방지 효과
- **테스트 신뢰성**: 테스트 코드와 실제 동작 간 일치성

## 즉시 적용 가능한 개선사항

### 1. 코드 구조 단순화
- 단일 파일의 과도한 책임 분산
- 모듈별 명확한 책임 정의
- 인터페이스 표준화

### 2. 테스트 자동화 강화
- CI/CD 파이프라인 구축
- 자동화된 품질 검사
- 회귀 테스트 자동화

### 3. 문서화 표준화
- API 문서 자동 생성
- 변경사항 자동 추적
- 지식베이스 구축

### 4. 예방적 품질 관리 시스템
- 반복적 버그 패턴 자동 검사 도구
- 상태 동기화 로직 검증 스크립트
- 코드 품질 이슈 자동 감지 및 보고
- 테스트 코드 일치성 검증 도구

## 중장기 개선 계획

### 1. AI Agent 도구 개발
- 코드 분석 도구
- 패턴 인식 시스템
- 자동화된 리팩토링 도구

### 2. 개발 프로세스 최적화
- 애자일 방법론 적용
- 지속적 개선 시스템
- 팀 협업 도구 통합

### 3. 예방적 품질 관리 시스템
- 반복적 버그 패턴 학습 및 예측
- 자동화된 코드 리뷰 시스템
- 실시간 품질 모니터링 대시보드
- 개발자 교육 및 멘토링 시스템

## 언어 및 커뮤니케이션

### 기본 규칙
- **모든 AI Agent 응답은 한국어로 제공**
- **명확하고 간결한 커뮤니케이션 우선**
- **코드 변경 시 목적과 영향 설명 필수**

### 이슈 에스컬레이션
- 기존 문서로 해결할 수 없는 경우
- 중대한 결정이 필요한 경우
- 진행을 막는 블로커가 발생한 경우
- 이슈의 배경, 현재 상황, 가능한 옵션을 명확히 제시

## 결론

이 AI Agent Workflow Template은 FileTagger 프로젝트의 성공적인 경험을 바탕으로 설계되었습니다. 특히 **AI Agent와 사용자 간의 효과적인 협업**을 통해 직접적인 코드 개선과 개발이 가능함을 확인했습니다.

핵심은 **인간과 AI의 장점을 조합**하여 전체적인 개발 효율성을 향상시키는 것입니다. AI Agent가 단순한 조언자 역할을 넘어서 **적극적인 개발 파트너**로서 작동할 때, 가장 큰 시너지를 낼 수 있습니다.

새로운 프로젝트에서 이 템플릿을 적용할 때는 프로젝트의 특성과 요구사항에 맞게 조정하여 사용하시기 바랍니다. 특히 **사용자와 AI Agent 간의 신뢰 관계**와 **명확한 소통**이 성공의 핵심 요소임을 기억하시기 바랍니다.
description:
globs:
alwaysApply: false
---
