---
description: Project-specific mandatory rules for FileTagger project.
globs: **/*
alwaysApply: true
---

# FileTagger Project Mandatory Rules

## Overview
This document outlines the mandatory rules and guidelines specific to the FileTagger project. Adherence to these rules ensures consistency, maintainability, and quality across the codebase and documentation.

## Rules

- **코드 품질 및 일관성 (Code Quality & Consistency)**
  - **정적 분석 도구**:
    - **`ruff`**: Python 코드의 포맷팅 및 린팅을 담당합니다. PEP 8 가이드라인 및 잠재적 오류를 검사하여 코드 스타일과 품질을 일관되게 유지합니다.
    - **`mypy`**: Python 코드의 정적 타입 검사를 수행하여 타입 관련 오류를 미리 찾아내고 코드의 견고성을 높입니다.
  - **사용법**:
    - **로컬 검사**: 코드를 커밋하기 전에 다음 명령을 실행하여 코드 품질을 확인합니다.
      - 포맷팅: `ruff format .`
      - 린팅: `ruff check .`
      - 타입 검사: `mypy .`
    - **Pre-commit Hooks (권장)**: `pre-commit` 프레임워크를 사용하여 Git 커밋 전에 자동으로 위 검사들을 실행하도록 설정합니다. 이는 코드 품질을 강제하는 효과적인 방법입니다.
  - **개발 철학 유지**: `ruff`와 `mypy`는 코드의 표면적인 일관성(스타일, 기본 패턴, 타입)을 강제하여 "한 명의 개발자"처럼 보이게 하는 데 기여합니다. 하지만 고수준의 개발 철학이나 설계 원칙은 다음을 통해 유지됩니다.
    - **명확한 문서화**: `docs/developer_guide/tagging_feature_spec.md`와 같은 설계/명세 문서를 통해 프로젝트의 설계 원칙과 구현 방향을 명확히 이해하고 따릅니다.
    - **코드 리뷰**: 스스로 작성한 코드를 프로젝트의 설계 원칙에 비추어 검토하는 "셀프 코드 리뷰" 습관을 들입니다.

- **명명 규칙 (Naming Conventions)**
  - 변수 및 함수: `snake_case`
  - 클래스: `PascalCase`
  - 모듈: `snake_case`

- **문서화 (Documentation)**
  - 모든 public 함수 및 클래스는 Google style docstrings를 따라야 합니다.
  - `GEMINI.md` 및 `docs/` 디렉토리는 중요한 변경 사항이나 새로운 기능에 대해 업데이트해야 합니다.

- **테스팅 (Testing)**
  - 새로운 기능 및 버그 수정에 대한 단위 테스트를 작성합니다.
  - 변경 사항을 커밋하기 전에 기존 테스트가 통과하는지 확인합니다.
  - **테스트 파일 조직**: 모든 테스트 파일은 `tests/` 디렉토리 아래에 위치해야 합니다.
    - 단위 테스트는 해당 모듈의 구조를 따라 `tests/<모듈명>/` 디렉토리에 배치합니다. (예: `tests/core/test_tag_manager.py`)
    - 테스트 데이터 생성 스크립트와 같은 테스트 유틸리티는 `tests/` 디렉토리 바로 아래에 배치합니다. (예: `tests/test_data_generator.py`)

- **커밋 메시지 (Commit Messages)**
  - Conventional Commits 명세(예: `feat: add new tag feature`)를 따릅니다.

- **의존성 관리 (Dependency Management)**
  - 모든 프로젝트 의존성은 `requirements.txt`에 나열되어야 합니다.
  - `pip-tools`를 사용하여 의존성을 관리합니다. (예: `pip-compile`, `pip-sync`)

- **보안 (Security)**
  - 민감한 정보(예: API 키, 데이터베이스 자격 증명)를 하드코딩하는 것을 피합니다.
  - 민감한 데이터에는 환경 변수 또는 보안 구성 관리 시스템을 사용합니다.

- **에러 핸들링 (Error Handling)**
  - `try-except` 블록을 사용하여 견고한 에러 핸들링을 구현합니다.
  - 디버깅 및 사용자 피드백을 위한 의미 있는 에러 메시지를 제공합니다.

- **성능 (Performance)**
  - 특히 자주 호출되는 함수나 루프에서 성능을 최적화합니다.
  - 불필요한 데이터베이스 쿼리 또는 I/O 작업을 피합니다.

- **UI/UX 가이드라인 (UI/UX Guidelines)**
  - 확립된 PyQt5 UI 디자인 원칙을 준수합니다.
  - 모든 애플리케이션 기능에서 일관된 사용자 경험을 보장합니다.

- **AI Agent Specific Rules**
  - All responses from the AI code agent must be provided in Korean (한글) only.
  - Prioritize clear and concise communication.
  - When making code changes, always explain the purpose and impact of the changes.
  - **중요 이슈 에스컬레이션**: 개발 중 기존 문서로 해결할 수 없거나, 중대한 결정이 필요하거나, 진행을 막는 블로커가 발생할 경우, Gemini는 사용자에게 직접 이슈를 보고하고 의사결정을 요청해야 합니다. 이때 이슈의 배경, 현재 상황, 가능한 옵션 등을 명확히 제시해야 합니다.

- **이슈 보고 (Issue Reporting)**
  - 개발 관련 이슈 발생 시 `docs/issues.md` 파일에 다음 양식을 사용하여 보고해야 합니다.
  - **이슈 유형**: (버그/기능 요청/개선/질문 등)
  - **제목**: 이슈를 명확하게 요약하는 한 문장
  - **설명**:
    - **문제/요청 내용**: 구체적인 문제 상황, 예상되는 동작, 요청하는 기능 등 상세 설명.
    - **재현 단계 (버그의 경우)**: 버그를 재현할 수 있는 단계별 절차.
    - **현재 동작**: 현재 시스템이 어떻게 동작하는지.
    - **기대 동작**: 시스템이 어떻게 동작해야 하는지.
    - **영향**: 이 이슈가 프로젝트에 미치는 영향 (예: 개발 지연, 기능 오작동 등).
    - **관련 파일/모듈**: 이슈와 관련된 코드 파일 또는 모듈.
    - **스크린샷/로그 (선택 사항)**: 문제 상황을 보여주는 스크린샷 또는 관련 로그.

- **이슈 해결 절차 (Issue Resolution Procedure)**
  - **1. 이슈 선택 및 할당 (개발자)**: `docs/issues.md`에서 해결할 이슈를 선택하고 작업 시작을 알립니다.
  - **2. 이슈 분석 및 해결 (개발자)**: 이슈 내용을 분석하고 코드를 작성하여 해결합니다.
  - **3. 설계/명세 문서 업데이트 필요성 검토 (개발자)**: 이슈 해결 과정에서 기존 설계/명세 문서(`docs/developer_guide/tagging_feature_spec.md` 등) 변경이 필요하다고 판단되면, 변경 내용을 정리하여 Gemini에게 공유하거나 업데이트를 요청합니다.
  - **4. 문서 업데이트 및 승인 (Gemini & 사용자)**: Gemini는 개발자가 제안한 문서 업데이트 내용을 검토하고, 필요시 사용자에게 승인을 요청하며, 승인된 내용에 따라 관련 문서를 업데이트합니다.
  - **5. 이슈 상태 업데이트 (개발자)**: 코드 변경 완료 및 테스트 통과 후, `docs/issues.md` 파일 내 해당 이슈 항목에 해결 상태, 해결 내용 요약, 해결 일자, 관련 커밋 등을 추가하여 업데이트합니다.
  - **6. 해결 검증 (사용자 또는 개발자)**: 해결된 이슈가 의도대로 동작하는지 확인합니다.
  - **7. 대화 로그 기록 (Gemini)**: 이슈 해결 과정에서 발생한 주요 논의 사항이나 결정 사항은 `docs/conversation_log.md`에 요약하여 기록합니다.

- **커밋 단위 (Commit Unit)**
  - 하나의 커밋은 하나의 논리적인 변경 단위여야 합니다. (원자성)
  - 커밋된 변경 사항은 그 자체로 완전하고 독립적으로 동작해야 합니다. (독립성)
  - 커밋 메시지는 해당 커밋이 무엇을 변경했고, 왜 변경했는지 명확하게 설명해야 합니다. (Conventional Commits 규칙 준수)
  - **커밋 실행 시점**: 기능 추가, 버그 수정, 리팩토링, 테스트 추가/수정, 설정 변경 등 작고 논리적인 변경이 완료되었을 때 커밋을 실행합니다.

- **브랜치 전략 (Branching Strategy)**
  - **`main` 브랜치**: 항상 안정적이고 배포 가능한 상태의 코드를 유지합니다. 모든 새로운 기능 개발이나 버그 수정은 별도의 Feature 브랜치에서 진행된 후 `main` 브랜치로 병합됩니다.
  - **Feature 브랜치**: 새로운 기능 개발, 버그 수정, 리팩토링 등 모든 작업은 `main` 브랜치에서 분기하여 Feature 브랜치에서 진행합니다.
  - **브랜치명 규칙**: 작업 내용을 명확히 알 수 있도록 `feat/기능명`, `bug/버그수정내용`, `refactor/리팩토링내용`, `docs/문서작업내용` 등 접두사를 붙여 명명합니다. (예: `docs/initial-setup`, `feat/tag-ui-improvements`)
  - **병합**: Feature 브랜치에서 작업이 완료되고 테스트가 통과되면, `main` 브랜치로 병합합니다. 이때 `--no-ff` 옵션을 사용하여 병합 커밋을 남기는 것을 권장합니다.

- **참조 문서 (Reference Documents)**
  - **프로젝트 개요**: `docs/portfolio/project_overview.md`
  - **태깅 기능 상세 명세**: `docs/developer_guide/tagging_feature_spec.md`
  - **대화 로그**: `docs/conversation_log.md`
  - **개발 이슈**: `docs/issues.md`
  - **GEMINI.md**: 프로젝트 전반에 대한 최신 정보 및 역할

