---
description: Project-specific mandatory rules for FileTagger project.
globs: **/*
alwaysApply: true
---

# FileTagger Project Mandatory Rules

## Overview
This document outlines the mandatory rules and guidelines specific to the FileTagger project. Adherence to these rules ensures consistency, maintainability, and quality across the codebase and documentation.

## Rules

- **Code Style & Formatting**
  - All Python code must adhere to PEP 8 guidelines.
  - Use Black for code formatting. (e.g., `black .`)
  - Use isort for import sorting. (e.g., `isort .`)

- **Naming Conventions**
  - Variables and functions: `snake_case`
  - Classes: `PascalCase`
  - Modules: `snake_case`

- **Documentation**
  - All public functions and classes must have docstrings following Google style.
  - Update `GEMINI.md` and `docs/` directory for any significant changes or new features.

- **Testing**
  - Write unit tests for new features and bug fixes.
  - Ensure existing tests pass before committing changes.
  - **테스트 파일 조직**: 모든 테스트 파일은 `tests/` 디렉토리 아래에 위치해야 합니다.
    - 단위 테스트는 해당 모듈의 구조를 따라 `tests/<모듈명>/` 디렉토리에 배치합니다. (예: `tests/core/test_tag_manager.py`)
    - 테스트 데이터 생성 스크립트와 같은 테스트 유틸리티는 `tests/` 디렉토리 바로 아래에 배치합니다. (예: `tests/test_data_generator.py`)

- **Commit Messages**
  - Follow Conventional Commits specification (e.g., `feat: add new tag feature`).

- **Dependency Management**
  - All project dependencies must be listed in `requirements.txt`.
  - Use `pip-tools` for managing dependencies (e.g., `pip-compile`, `pip-sync`).

- **Security**
  - Avoid hardcoding sensitive information (e.g., API keys, database credentials).
  - Use environment variables or a secure configuration management system for sensitive data.

- **Error Handling**
  - Implement robust error handling using `try-except` blocks.
  - Provide meaningful error messages for debugging and user feedback.

- **Performance**
  - Optimize code for performance, especially in frequently called functions or loops.
  - Avoid unnecessary database queries or I/O operations.

- **UI/UX Guidelines**
  - Adhere to the established PyQt5 UI design principles.
  - Ensure a consistent user experience across all application features.

- **AI Agent Specific Rules**
  - All responses from the AI code agent must be provided in Korean (한글) only.
  - Prioritize clear and concise communication.
  - When making code changes, always explain the purpose and impact of the changes.

- **이슈 보고 (Issue Reporting)**
  - 개발 관련 이슈 발생 시 다음 양식을 사용하여 보고해야 합니다.
  - **이슈 유형**: (버그/기능 요청/개선/질문 등)
  - **제목**: 이슈를 명확하게 요약하는 한 문장
  - **설명**:
    - **문제/요청 내용**: 구체적인 문제 상황, 예상되는 동작, 요청하는 기능 등 상세 설명.
    - **재현 단계 (버그의 경우)**: 버그를 재현할 수 있는 단계별 절차.
    - **현재 동작**: 현재 시스템이 어떻게 동작하는지.
    - **기대 동작**: 시스템이 어떻게 동작해야 하는지.
    - **영향**: 이 이슈가 프로젝트에 미치는 영향 (예: 개발 지연, 기능 오작동 등).
    - **관련 파일/모듈**: 이슈와 관련된 코드 파일 또는 모듈.
    - **스크린샷/로그 (선택 사항)**: 문제 상황을 보여주는 스크린샷 또는 관련 로그.

- **커밋 단위 (Commit Unit)**
  - 하나의 커밋은 하나의 논리적인 변경 단위여야 합니다. (원자성)
  - 커밋된 변경 사항은 그 자체로 완전하고 독립적으로 동작해야 합니다. (독립성)
  - 커밋 메시지는 해당 커밋이 무엇을 변경했고, 왜 변경했는지 명확하게 설명해야 합니다. (Conventional Commits 규칙 준수)
  - **커밋 실행 시점**: 기능 추가, 버그 수정, 리팩토링, 테스트 추가/수정, 설정 변경 등 작고 논리적인 변경이 완료되었을 때 커밋을 실행합니다.

- **브랜치 전략 (Branching Strategy)**
  - **`main` 브랜치**: 항상 안정적이고 배포 가능한 상태의 코드를 유지합니다. 모든 새로운 기능 개발이나 버그 수정은 별도의 Feature 브랜치에서 진행된 후 `main` 브랜치로 병합됩니다.
  - **Feature 브랜치**: 새로운 기능 개발, 버그 수정, 리팩토링 등 모든 작업은 `main` 브랜치에서 분기하여 Feature 브랜치에서 진행합니다.
  - **브랜치명 규칙**: 작업 내용을 명확히 알 수 있도록 `feat/기능명`, `bug/버그수정내용`, `refactor/리팩토링내용`, `docs/문서작업내용` 등 접두사를 붙여 명명합니다. (예: `docs/initial-setup`, `feat/tag-ui-improvements`)
  - **병합**: Feature 브랜치에서 작업이 완료되고 테스트가 통과되면, `main` 브랜치로 병합합니다. 이때 `--no-ff` 옵션을 사용하여 병합 커밋을 남기는 것을 권장합니다.

- **참조 문서 (Reference Documents)**
  - **프로젝트 개요**: `docs/portfolio/project_overview.md`
  - **태깅 기능 상세 명세**: `docs/developer_guide/tagging_feature_spec.md`
  - **대화 로그**: `docs/conversation_log.md`
  - **GEMINI.md**: 프로젝트 전반에 대한 최신 정보 및 역할

